source("R/data_prep.R")#
source("R/params.R")
rm(list = ls())#
#
library("MASS") #
library("reshape2")#
library("ggplot2")#
library("cowplot")#
inv.logit <- function(x) {exp(x)/(1+exp(x))}#
#
# load scripts#
source("R/data_prep.R")#
source("R/params.R")
rm(list = ls())#
#
########################################
# LOAD SCRIPTS#
########################################
source("R/functions.R")#
source("R/data_prep.R")#
sdat<-sdat[!sdat$colony_id==287,]#
gdat<-gdat[!gdat$colony_id==287,]#
source("R/params.R")
ggplot(params, aes(x=reorder(spp, -eggC/50.6), y=eggC/50.6, fill=spp))+guides(fill="none")+#
geom_bar(stat="identity")+#
scale_fill_manual(values=cols)
y
?draw_line
??draw_line
?dnorm
rm(list = ls())#
#
########################################
# LOAD SCRIPTS#
########################################
source("R/functions.R")#
source("R/data_prep.R")#
sdat<-sdat[!sdat$colony_id==287,]#
gdat<-gdat[!gdat$colony_id==287,]#
source("R/params.R")#
library("ggrepel")#
library("grid")#
library("png")#
#
########################################
# PARAMETER SPACE#
########################################
#
# proportion mortality at 100cm2#
params$p_mort<-inv.logit((params$p.slp*log10(0.01))+params$p.int)#
#
# average modelled survival#
params$av.surv<-aggregate(pred~spp, s.pred,mean)$pred#
#
# recruit survival#
rec.cm <- 11#
params$survcm<-aggregate(pred~spp, s.pred[s.pred$area<log10(pi*(rec.cm/100/2)^2),], FUN=mean)$pred#
#
# size at maximum survival #
max.surv<-do.call(rbind, lapply(split(s.pred, as.factor(s.pred$spp)), function(x) {return(x[which.max(x$pred),])}))#
params$safe.size<-max.surv$area#
#
# fecundity per area#
params$f.cm2<-aggregate(f.cm2~spp, fec,mean)$f.cm2#
#ggplot(params, aes(f.cm2, f.int))+geom_text(aes(label=spp))#
#
# total fecundity#
head(fec)#
params$f.colony<-aggregate(fecundity~spp, fec,mean)$fecundity#
#ggplot(params, aes(f.cm2, f.int))+geom_text(aes(label=spp))#
#
# average size#
size.av <- aggregate(area~spp, ss[!is.na(ss$spp),], mean)#
params$size.av <- size.av$area[match(params$spp, size.av$spp)]#
#
# egg energy per area#
params$en.cm2<-params$f.cm2*params$eggC#
#
# minimum at reproductive maturity#
params$min.r<-1/aggregate(area_cm2~spp, fec[fec$reproductive==1,], min)$area_cm2#
#
# PCA of demographic parameters#
colnames(params)#
rownames(params) <- params$spp#
pca<-prcomp(params[,c("r.int","f.int","f.cm2","survcm", "av.surv","p_mort", "min.r", "f.colony")], scale=T, center=T)#
biplot(pca)#
#
exp<-round(c(summary(pca)[[1]][1]^2/sum(summary(pca)[[1]]^2),summary(pca)[[1]][2]^2/sum(summary(pca)[[1]]^2)),3)*100#
exp#
#
# abundance#
ggplot(params, aes(reorder(spp, abundance_05), abundance_05))+geom_bar(stat="identity")+facet_wrap(~morphology, scales="free_x")#
#
# pair differences#
# Q: Is AL (middle man) classed as a rare or common?#
# params$abundance_pair[params$spp=="AL"] <- "Rare"#
params2<-rbind(params, params[6,]) #duplicate AN (or AM=6)#
params2$morph<-as.character(params2$morph)#
params2$morph[c(7, 12)]<-c("corymbose_2","corymbose_2")#AN/AM#
comp<-dcast(params2, morph~abundance_pair, value.var="spp")#
comp$AC<-params2$abundance_05[match(comp$Common, params2$spp)]#
comp$AR<-params2$abundance_05[match(comp$Rare, params2$spp)]#
comp$diff <- comp$AC/comp$AR#
comp#
#
# size#
ggplot(ss, aes(x=area))+#
geom_density()+#
facet_wrap(~spp)#
#
# FIGURE 1#
source("R/fig.1.R")#
fig.1#
#ggsave("figs/fig.1.png", fig.1, width=15, height=10, units="cm", dpi = 300)#
#
########################################
# IPM FUNCTIONS#
########################################
#------------------------------- growth#
g.yx <- function(y, x) {#
	dnorm(y, mean=params$g.int[params$spp==sp] + #
	  params$g.slp[params$spp==sp]*x,#
	    sd=sqrt(params$g.var[params$spp==sp]))#
	    }#
#-------------------------------survival#
s.x <- function(x) { #
	u <- params$s.int[params$spp==sp] + #
	  params$s.slp[params$spp==sp] * x + #
	    params$s.slp.2[params$spp==sp] * x^2#
  return(inv.logit(u)) #
}#
#
#------------------------------- growth & partial morality#
p.yx <- function(y, x) {#
  # x <- -4#
  g <- a_func(r_func(10^x) + params$r.int[params$spp==sp] )#
  #+ 1.96 * params$r.err[params$spp==sp])#
  temp <- 10^y / g#
  temp[temp > 1] <- 1#
  dnorm(logit(1 - temp), params$p.int[params$spp==sp] + x * params$p.slp[params$spp==sp], params$p.sig[params$spp==sp])#
}#
#
#------------------------------- reproduction#
 r.yx <- function(y, x) {	#
 	mat<- inv.logit(params$m.int[params$spp==sp] + #
 	  params$m.slp[params$spp==sp] *x)#
 	fec<- exp(params$f.int[params$spp==sp] + #
 	  params$f.slp[params$spp==sp] *x) #
 	 En <-  params$eggC[params$spp==sp]#
   #siz<- rnorm(y,mean=params$rec.size[params$spp==sp], sd=0.05) #
   out <- (rec* mat * fec) #* (En/max(params$eggC))#
   out[x < rec.size | y >= rec.size] <- 0 #if x is below recruitment size#
   return(out)#
   } #
#
ggplot(params, aes(x=reorder(spp, -eggC/50.6), y=eggC/50.6, fill=spp))+guides(fill="none")+#
geom_bar(stat="identity")+#
scale_fill_manual(values=cols)#
#
ggplot(params, aes(x=reorder(spp, -f.slp), y=f.slp, fill=spp))+guides(fill="none")+#
coord_cartesian(ylim=c(2.3,2.8))+#
facet_wrap(~morphology, scales="free_x", nrow=1)+#
geom_bar(stat="identity")+#
scale_fill_manual(values=cols)#
 #------------------------------- kernel#
pmort<-T#
#
bigmatrix <- function() {#
    if (pmort) {#
    G <- h * outer(y, y, p.yx)#
  } else {#
    G <- h * outer(y, y, g.yx)#
  }#
  G <- t(t(G) / apply(G, 2, sum))#
  S <- s.x(y)#
  P <- G #
  for(i in 1:n) P[,i]=G[,i]*S[i]#
  R <- h * outer(y, y, r.yx) #
  #R <- h * outer(y, pmin(y, smax), r.yx) #  ceiling#
  K <- P + R#
  lam <- Re(eigen(K)$values[1])#
	w <- abs(Re(eigen(K)$vectors[,1])) #
	v <- abs(Re(eigen(t(K))$vectors[,1]))#
	return(list(K=K, lam=lam, w=w, v=v, G=G, S=S, R=R, P=P)) }#
########################################
# MESH AND BOUNDARIES#
########################################
#
params$rec.size <- log10(pi*params$r.int^2)#
params$rec.size2 <- log10(pi*(params$r.int*(10/12))^2)#
max.size <- 1 #
n <- 100#
rec <- 0.001#
#rec <- 1*10^-8#
#min.size <- -3.5 #
#rec.size <- -2.21 #
# Maximum size windows, constant or vary by species? #
#params$smax<-aggregate(area_cm2~spp, dat, max)$area#
#params$smin<-aggregate(area_cm2~spp, dat, min)$area#
########################################
# PLOT IPMS#
########################################
#
par(mfcol=c(2, 6))#
#
lam_const <- NULL#
ipm.k.list <- list()#
ipm.p.list <- list()#
ipm.r.list <- list()#
y.list <- list()#
#
for (sp in spp) {#
	rec <- 1#
	#sp <- "AC"#
	#smax<-params[params$spp==sp, "smax"]#
	rec.size <- params$rec.size[params$spp==sp]#
	#rec.size <- max(params$rec.size)#
	b <- seq(rec.size, max.size, length=n)#
	h <- b[2] - b[1]#
	b <- c(min(b)-(2*h), min(b)-h, b)#
	y <- 0.5 * (b[1:n]+b[2:(n+1)])#
	I <- y >= rec.size#
  	sub<-gdat[gdat$spp==sp,]#
    mod <- bigmatrix()#
	image(y, y, t(mod$P)^0.3)   #
	points(sub$area, sub$area_next, cex=0.25)#
	title(sp, line=-1)#
	abline(0, 1, lty=2)#
	y.list[[sp]] <- y #
	ipm.k.list[[sp]] <- mod$P#
	ipm.p.list[[sp]] <- mod$P#
	ipm.r.list[[sp]] <- mod$R#
	lam_const<-c(lam_const,bigmatrix()$lam) #
	}#
# Figure 2#
source("R/fig.S2.R")	#
fig.s2
rm(list = ls())#
#
########################################
# LOAD SCRIPTS#
########################################
source("R/functions.R")#
source("R/data_prep.R")#
#
source("R/goni.R") # removes smalls to fix growth curve#
#
sdat<-sdat[!sdat$colony_id==287,]#
gdat<-gdat[!gdat$colony_id==287,]#
source("R/params.R")#
library("ggrepel")#
library("grid")#
library("png")#
#
########################################
# PARAMETER SPACE#
########################################
#
# proportion mortality at 100cm2#
params$p_mort<-inv.logit((params$p.slp*log10(0.01))+params$p.int)#
#
# average modelled survival#
params$av.surv<-aggregate(pred~spp, s.pred,mean)$pred#
#
# recruit survival#
rec.cm <- 11#
params$survcm<-aggregate(pred~spp, s.pred[s.pred$area<log10(pi*(rec.cm/100/2)^2),], FUN=mean)$pred#
#
# size at maximum survival #
max.surv<-do.call(rbind, lapply(split(s.pred, as.factor(s.pred$spp)), function(x) {return(x[which.max(x$pred),])}))#
params$safe.size<-max.surv$area#
#
# fecundity per area#
params$f.cm2<-aggregate(f.cm2~spp, fec,mean)$f.cm2#
#ggplot(params, aes(f.cm2, f.int))+geom_text(aes(label=spp))#
#
# total fecundity#
head(fec)#
params$f.colony<-aggregate(fecundity~spp, fec,mean)$fecundity#
#ggplot(params, aes(f.cm2, f.int))+geom_text(aes(label=spp))#
#
# average size#
size.av <- aggregate(area~spp, ss[!is.na(ss$spp),], mean)#
params$size.av <- size.av$area[match(params$spp, size.av$spp)]#
#
# egg energy per area#
params$en.cm2<-params$f.cm2*params$eggC#
#
# minimum at reproductive maturity#
params$min.r<-1/aggregate(area_cm2~spp, fec[fec$reproductive==1,], min)$area_cm2#
#
# PCA of demographic parameters#
colnames(params)#
rownames(params) <- params$spp#
pca<-prcomp(params[,c("r.int","f.int","f.cm2","survcm", "av.surv","p_mort", "min.r", "f.colony")], scale=T, center=T)#
biplot(pca)#
#
exp<-round(c(summary(pca)[[1]][1]^2/sum(summary(pca)[[1]]^2),summary(pca)[[1]][2]^2/sum(summary(pca)[[1]]^2)),3)*100#
exp#
#
# abundance#
ggplot(params, aes(reorder(spp, abundance_05), abundance_05))+geom_bar(stat="identity")+facet_wrap(~morphology, scales="free_x")#
#
# Is AL (middle man) classed as a rare or common?#
# params$abundance_pair[params$spp=="AL"] <- "Rare"#
params2<-rbind(params, params[6,]) #duplicate AN (or AM=6)#
params2$morph<-as.character(params2$morph)#
params2$morph[c(7, 12)]<-c("corymbose_2","corymbose_2")#AN/AM#
comp<-dcast(params2, morph~abundance_pair, value.var="spp")#
comp$AC<-params2$abundance_05[match(comp$Common, params2$spp)]#
comp$AR<-params2$abundance_05[match(comp$Rare, params2$spp)]#
comp$diff <- comp$AC/comp$AR#
comp
# ggplot course for molsa#
#
################################################
# 5 steps to data visualization with ggplot: #
################################################
# Knowing the stats first#
# Wrangling/formatting data ("long" format)#
# Getting familiar with the ggplot language#
# Googling the right things (using stack overflow)#
# Being creative but keeping the message clear#
#
################################################
# Today #
################################################
# Basic plots (barplot, boxplot, xy-plot, histogram, densityplot, lineplot, tile/contourplot)#
# Themes, transformations, labels, legends, colours, annotations#
# Inserting plots/images#
# Multi-panel & Saving plots#
# Inserting plots/images/text#
# Complicated plot, requiring long format (species barplots)#
# Complicated plot, multiple datasets (nMDS or PCA)#
################################################
# Data - bleaching in Indonesia (10x30m transects, 6 years )#
################################################
# Warwick, R.M., Clarke, K.R. & Suharsono (1990): A statistical analysis of coral community responses to the 1982-1983 El Nino in the Thousand Islands, Indonesia. - Coral Reefs, 8: 171-179.#
#
# isolate genera names - sub(" .*", "", colnames(corals))#
#
library("mvabund")#
data(tikus)#
#
corals <- tikus$abun # cover#
data <- tikus$x#
#
# species richness #
pres_abs <- ifelse(corals>0, 1,0)#
data$rich <- rowSums(pres_abs)#
data$rich#
#
# coral cover #
data$cover <- (rowSums(corals)/3000)*100#
data$cover#
#
################################################
# Basic plots#
################################################
#
# let's create basic plots#
library("ggplot2")#
#
# xy plot#
ggplot(data=data, aes(cover,rich))+#
geom_point()+#
geom_smooth(method="lm", formula=y~x)#
#
# boxplot#
ggplot(data=data, aes(x=time, y=cover))+#
geom_boxplot()#
#
# barplot#
ggplot(data=data, aes(x=time, y=rich))+#
stat_summary(geom="bar", fun="mean")+#
stat_summary(geom="errorbar", fun.data=mean_se)#
#
sites.av <- aggregate(rich~time, data, mean)#
#
se <- function(x){sd(x)/(sqrt(length(x)))}#
sites.av$se <- aggregate(rich~time, data, se)$rich#
#
ggplot()+#
geom_bar(data=sites.av, aes(x=time, y=rich), stat="identity")+#
geom_segment(data=sites.av, aes(x=time, xend=time, y=rich-se, yend=rich+se))#
#
# violin plot#
ggplot(data=data, aes(x=time, y=cover))+#
geom_violin()#
#
# histogram#
ggplot(data=data, aes(x=cover))+#
geom_histogram(bins=20)+#
scale_x_log10()#
#
# density#
ggplot(data=data, aes(x=cover))+#
geom_density()+#
scale_x_log10()#
#
# line plot #
coords <- data.frame(lat=rep(lat,length(long)), long=rep(long, each=length(lat)))#
coords$z <- coords$lat*coords$long#
#
ggplot(coords, aes(lat, long))+ geom_raster(aes(fill=z))+geom_contour(aes(z=z))#
# density plot#
ggplot(data, aes(x=cover, y=rich))+#
stat_density_2d()#
################################################
# Themes/colours/legends/transformations/labels#
################################################
#
# other themes - https://mran.microsoft.com/snapshot/2017-02-04/web/packages/ggthemes/vignettes/ggthemes.html#
#
# colour schemes - https://www.datanovia.com/en/blog/top-r-color-palettes-to-know-for-great-data-visualization/#
#
# other colour schemes - https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3#
#
ggplot(data=data, aes(cover,rich))+#
geom_point(shape=21, aes(fill=rich), size=3)+#
geom_smooth(method="lm", formula=y~x)+#
scale_fill_distiller(palette="Spectral")+#
theme_bw()#
#
# logging axes#
ggplot(data=data, aes(log(cover),log(rich)))+#
geom_point()+#
geom_smooth(method="lm", formula=y~x)+#
theme_classic()#
#
# logging axes but keeping the scale#
ggplot(data=data, aes(cover,rich))+#
geom_point()+#
scale_x_log10()+#
scale_y_log10()+#
geom_smooth(method="lm", formula=y~x)+#
theme_classic()#
mod <- lm(rich~cover, data)#
c <- round(coef(mod)[1], 1)#
b <- round(coef(mod)[2], 2)#
rsq <- summary(mod)$r.squared#
#
################################################
# Inserting plots/images#
################################################
#
library("png")#
library("grid")#
#
img<-readPNG("~/desktop/image.png")#
img<-rasterGrob(img, interpolate=TRUE)#
plot <- ggplot(data=data, aes(cover,rich))+#
geom_point()+#
annotation_custom(img, xmin=0, xmax=10, ymin=20, ymax=30)+#
#scale_x_log10()+#
#scale_y_log10()+#
geom_smooth(method="lm", formula=y~x)+#
theme_classic()+theme(plot.background=element_blank(), panel.background=element_blank())#
plot #
#
plot2 <- plot+#
annotation_custom(ggplotGrob(plot), xmin=30, xmax=50, ymin=0, ymax=20)#
plot2#
################################################
# Multipanel plots / saving#
################################################
#
# library("cowplot")#
#
panel_a <- ggplot(data=data, aes(cover,rich))+#
geom_point()+#
scale_x_log10()+#
scale_y_log10()+#
geom_smooth(method="lm", formula=y~x)+#
theme_classic()#
#
fig.1 <- plot_grid(panel_a, panel_a)#
#
#ggsave("~/Desktop/fig.1.png", fig.1, width=15, height=9.5, units="cm", dpi = 300)#
################################################
# Data wrangling/more complex plots#
################################################
#
library("reshape2")#
# tile plot - useful for maps#
#
lat <- c(1:20)#
long <- c(1:100)#
melt(outer(lat, long))#
#
ggplot(melt(outer(lat, long)), aes(Var1, Var2))+ geom_raster(aes(fill=value))+geom_contour(aes(z=value))#
# which species are most abundant?#
#
head(corals)#
#
spp <- cbind(data, corals) # stick data by columns#
head(spp)#
#
# average across times#
#spp.av <- data.frame(aggregate(.~time, spp, mean)) #
#
# LONG FORMAT#
#
spp.long <- melt(spp, id.vars=c("time","rich","rep","cover"), value.name="cover.sp", variable.name="species")#
head(spp.long)#
#
# work with genera#
spp.long$species <- gsub("[.]", " ",spp.long$species)#
spp.long$genus <- sub(" .*", "", spp.long$species)#
head(spp.long)#
gen.long <- aggregate(cover.sp~genus+time+rep, spp.long, sum)#
gen.long.av <- aggregate(cover.sp~genus+time, gen.long, mean)#
#
ggplot(gen.long.av, aes(cover.sp, reorder(genus, -cover.sp)))+#
geom_bar(stat="identity")+#
facet_wrap(~time)#
ggplot(gen.long.av, aes(as.numeric(as.character(time)), cover.sp))+#
geom_area(aes(fill=genus))#
library("vegan")#
#
mds<-metaMDS(corals, k=2, distance="bray", autotransform=FALSE, trymax=100)#
stressplot(mds)#
#
points<-cbind(data.frame(scores(mds)), data)#
vectors<-data.frame(mds$species)#
#
ggplot()+#
geom_segment(data=vectors, aes(x=0, y=0, xend=MDS1, yend=MDS2), col="grey")+#
geom_point(data=points, aes(NMDS1, NMDS2))+#
geom_text(data=vectors, aes(MDS1, MDS2, label=rownames(vectors)))+#
#facet_wrap(~time)+#
theme_bw()#
################################################
# Mapping in ggplot#
################################################
#
library("maptools")#
library("raster")#
library("rgdal")#
#
# source of this code: http://www.rpubs.com/spoonerf/countrymapggplot2#
#
usa<-getData("GADM", country="USA", level=1)  # choose country ISO code#
usa_UTM<-spTransform(usa, CRS("+init=EPSG:32404"))  # set projection#
# UTM square from: http://www.dmap.co.uk/utmworld.htm (longitude square + N/S)#
# search this UTM code to get ESPG no at https://spatialreference.org #
#
hi<-usa_UTM[usa_UTM@data$NAME_1 == "Hawaii",] #
hi = spTransform(hi, "+init=epsg:4326")#
hi_df<-fortify(hi)  #
mid<-c(21.5, -158.0) # midpoint#
a<-0.35 # area#
ggplot() + geom_polygon(data=hi_df, aes(long,lat, group=group), fill="whitesmoke", col="black", size=0.1)+#
 xlim(min(hi_df$long),max(hi_df$long))+#
 ylim(min(hi_df$lat),max(hi_df$lat))+#
coord_cartesian(c(mid[2]-a, mid[2]+a) ,c(mid[1]-a, mid[1]+a))+#
theme_void()
